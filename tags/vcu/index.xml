<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VCU on Hank Tech Lab</title><link>https://hanketgithub.github.io/tags/vcu/</link><description>Recent content in VCU on Hank Tech Lab</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 25 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://hanketgithub.github.io/tags/vcu/index.xml" rel="self" type="application/rss+xml"/><item><title>VCU 開發進度總結 — 2025-07-25</title><link>https://hanketgithub.github.io/tech/vcu_progress/</link><pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate><guid>https://hanketgithub.github.io/tech/vcu_progress/</guid><description>Fetch ES Output 機制總覽（2025-07-23） 在使用 AL_Encoder_Process() 將 frame 推入 encoder 後，ES bitstream 並非主動呼叫 API 回傳，而是透過 callback 機制觸發推送完成的編碼結果。
Callback 實作範例 void myEndEncoding(void *userParam, AL_TBuffer *pStream, AL_TBuffer const *pSrc, int iLayerID) { uint8_t *data = AL_Buffer_GetData(pStream); // 解析 Picture metadata AL_TPictureMetaData *pPicMeta = (AL_TPictureMetaData *) AL_Buffer_GetMetaData(pStream, AL_META_TYPE_PICTURE); printf(&amp;#34;Picture Type %s %s\n&amp;#34;, PictTypeToString(pPicMeta-&amp;gt;eType).c_str(), pPicMeta-&amp;gt;bSkipped ? &amp;#34;is skipped&amp;#34; : &amp;#34;&amp;#34;); // 解析 Stream metadata AL_TStreamMetaData *pStreampMeta = (AL_TStreamMetaData *) AL_Buffer_GetMetaData(pStream, AL_META_TYPE_STREAM); printf(&amp;#34;sections = %d / %d\n&amp;#34;, pStreampMeta-&amp;gt;uNumSection, pStreampMeta-&amp;gt;uMaxNumSection); for (uint16_t i = 0; i &amp;lt; pStreampMeta-&amp;gt;uNumSection; i++) { AL_TStreamSection section = pStreampMeta-&amp;gt;pSections[i]; printf(&amp;#34;section %d: size = %d\n&amp;#34;, i, section.</description></item></channel></rss>