<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VCU on Hank Tech Lab</title><link>https://hanketgithub.github.io/tags/vcu/</link><description>Recent content in VCU on Hank Tech Lab</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 01 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://hanketgithub.github.io/tags/vcu/index.xml" rel="self" type="application/rss+xml"/><item><title>VCU 開發進度總結 — 2025-08-01</title><link>https://hanketgithub.github.io/tech/vcu_progress/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://hanketgithub.github.io/tech/vcu_progress/</guid><description>更新概要（2025-07-30） 已確認 Allegro encoder callback 機制會卡住是因為未在 callback 中呼叫 AL_Encoder_PutStreamBuffer() 歸還使用過的 bitstream buffer。此行為違反一般 callback 使用常識，但確實為必要操作，否則 encoder 將無法繼續產出 ES。
Send Input Frame Trace（2025-08-01） exe_encoder 主邏輯在 SafeChannelMain() 裡：
while (...) { LayerResources::SendInput(...); } 🔁 Function Call Trace SafeChannelMain() └─ LayerResources::SendInput(cfg, enc.get(), traceHooker) └─ sendInputFileTo( frameReader, SrcBufPool, SrcYuv.get(), cfg, FileInfo, pSrcConv.get(), firstSink, iPictCount, iReadCount ) └─ GetSrcFrame( iReadCount, iPictCount, frameReader, FileInfo, SrcBufPool, Yuv, tChParam, cfg, pSrcConv ) └─ ReadSourceFrame(SrcBufPool, Yuv, frameReader, tUpdatedDim, pSrcConv) └─ ReadSourceFrameBuffer(pBuffer, conversionBuffer, frameReader, tUpdatedDim, pSrcConv) ├─ if conversion needed: │ ├─ frameReader-&amp;gt;ReadFrame(conversionBuffer) │ └─ pSrcConv-&amp;gt;ConvertSrcBuf(conversionBuffer, pBuffer) └─ else: └─ frameReader-&amp;gt;ReadFrame(pBuffer) 🧩 Input Components 說明 變數名 類型 / 來源 備註 frameReader unique_ptr&amp;lt;FrameReader&amp;gt; Instance variable（UnCompFrameReader） SrcBufPool PixMapBufPool DMA allocator buffer pool Yuv AL_TBuffer * 使用 SrcYuv.</description></item></channel></rss>