<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Teches on Hank Tech Lab</title><link>https://hanketgithub.github.io/tech/</link><description>Recent content in Teches on Hank Tech Lab</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 10 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://hanketgithub.github.io/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Mac 作為 Virtual File System</title><link>https://hanketgithub.github.io/tech/mbp_apfs_smb_bridge_guide/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>https://hanketgithub.github.io/tech/mbp_apfs_smb_bridge_guide/</guid><description>🎯 核心目標 用現有 M3 MacBook Pro 直接當「APFS → SMB/NFS 跨平台橋接器」 讓 Windows / Linux 都能讀寫 APFS 卷宗，而不需在意底層檔案系統相容性 💡 為什麼保留 MBP 而不是換 Mac mini 有螢幕與鍵盤，隨時可管理、排錯 目前設定已可直接跨平台存取 ⚙ 建議設定方案（雙場景） 1. 在 M3 MBP 上設定檔案共享 System Settings → General → Sharing → 開啟 File Sharing Options → 勾選 Sharing &amp;hellip; SMB，並勾選你的使用者帳號（輸入密碼啟用） 將 LaCie SSD（APFS） 加入共享清單，設定需要的帳號為 Read &amp;amp; Write 權限 2. Windows 連線方法 檔案總管： \\&amp;lt;MBP_IP&amp;gt; 範例： \\172.17.6.88 登入時： 使用者：hank（不加 @domain） 密碼：macOS 登入密碼 3. Linux 連線方法 檔案總管 GUI： smb://172.</description></item><item><title>VCU 開發進度總結 — 2025-08-01</title><link>https://hanketgithub.github.io/tech/vcu_progress/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://hanketgithub.github.io/tech/vcu_progress/</guid><description>編譯步驟： # 設定 cross compile 環境 source ~/VEGA2200/trunk/xilinx_sdk_r5_vega6000/sdk/environment-setup-cortexa72-cortexa53-xilinx-linux # 進入正確版本的 source tree cd ~/vcu-ctrl-sw-xlnx_rel_v2025.1 # 編譯 make -j8 # 確認輸出檔案型態 file bin/AL_Encoder.exe 更新概要（2025-08-04） 格式轉換.
格式轉換（2025-08-04） CYuvSrcConv::ConvertSrcBuf(AL_TBuffer const *pSrcIn, AL_TBuffer *pSrcOut)
根據 pSrcOut 的 FOURCC，選擇對應的轉換 case
例如，若輸出為 NV12，將執行：
case FOURCC(NV12): return convertToNV12(pSrcIn, tFourCCIn, pSrcOut); convertToNV12(AL_TBuffer const* pSrcIn, TFourCC inFourCC, AL_TBuffer* pSrcOut)
根據輸入格式 inFourCC，選擇對應的轉換邏輯，例如：
case FOURCC(I420): return I420_To_NV12(pSrcIn, pSrcOut); 最終將透過對應函式將輸入格式轉為 NV12。
Send Input Frame Trace（2025-08-01） exe_encoder 主邏輯在 SafeChannelMain() 裡：
while (...) { LayerResources::SendInput(.</description></item><item><title>LeetCode 每日打卡 RPG 🎯💻</title><link>https://hanketgithub.github.io/tech/lc/</link><pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate><guid>https://hanketgithub.github.io/tech/lc/</guid><description>LeetCode
Apr Mon Tue Wed Thu Fri Sat Sun 14 (32) 15 (17) 16 (17) 17 (0) 18 (0) 19 (0) 20 (0) 21 (42) 22 (XXX) 23 (XXX) 24 (XXX) 25 (XXX) 26 (XXX) 27 (XXX) 28 (XXX) 29 (XXX) 30 (XXX) May Mon Tue Wed Thu Fri Sat Sun 1 (XXX) 2 (XXX) 3 (XXX) 4 (XXX) 5 (XXX) 6 (XXX) 7 (XXX) 8 (XXX) 9 (XXX) 10 (XXX) 11 (XXX) 12 (XXX) 13 (XXX) 14 (XXX) 15 (XXX) 16 (XXX) 17 (XXX) 18 (XXX) 19 (XXX) 20 (XXX) 21 (XXX) 22 (XXX) 23 (XXX) 24 (XXX) 25 (XXX) 26 (XXX) 27 (XXX) 28 (XXX) 29 (XXX) 30 (XXX) 31 (XXX) 3186 Maximum Total Damage With Spell Casting, 1840 4/15 Figure out why previous solution doesn&amp;rsquo;t work.</description></item><item><title>C++ STL</title><link>https://hanketgithub.github.io/tech/cpp_std/</link><pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate><guid>https://hanketgithub.github.io/tech/cpp_std/</guid><description>Binary Search int version while (L &amp;lt; R) { int M = L + (R-L)/2; if (check(M)) { return M; } else if (A[M] &amp;lt; target) { L = M+1; } else { R = M; } } return L; double version while (R - L &amp;gt; 1e-6) { double M = L + (R-L) / 2.0; if (M &amp;lt; target) { L = M; } else { R = M; } } return L; L X X X M X T X R</description></item><item><title>新機 GitHub SSH Clone + Hugo 環境 Setup 小抄</title><link>https://hanketgithub.github.io/tech/hugo_setup/</link><pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate><guid>https://hanketgithub.github.io/tech/hugo_setup/</guid><description>目標 快速在新機設定 GitHub SSH，
將 Hugo 專案 clone 到 ~/Projects/ 目錄下。
1. 確認 SSH 金鑰是否已存在 ls -al ~/.ssh 有看到 id_ed25519 / id_ed25519.pub 就可以跳到 Step 3
如果沒有，執行：
ssh-keygen -t ed25519 -C hanketgithub@email.com 一路按 Enter，不用改檔名或密碼。
2. 將公鑰加到 GitHub 帳戶 cat ~/.ssh/id_ed25519.pub 複製那一整行內容 ➔ 到 GitHub：
Settings → SSH and GPG keys → New SSH key ➔ 貼上。
Title 建議：「MacBook 2025」
3. 測試 SSH 連線是否成功 ssh -T git@github.com 看到：
Hi hanketgithub! You&amp;#39;ve successfully authenticated, but GitHub does not provide shell access.</description></item><item><title>HDMI AUX Data</title><link>https://hanketgithub.github.io/tech/hdmi_aux/</link><pubDate>Tue, 08 Apr 2025 00:00:00 +0000</pubDate><guid>https://hanketgithub.github.io/tech/hdmi_aux/</guid><description>AVI Info Frame Name Offset Bits Description Packet Type byte[0] - Fixed 0x82 (AVI InfoFrame) Version byte[1] - AVI InfoFrame version (typically 2) Length byte[2] - Payload length (typically 13 bytes) Checksum byte[3] - Header checksum Y (Color Space) byte[4] [6:5] 00: RGB, 01: YCbCr 4:2:2, 10: YCbCr 4:4:4 A (Active Format Info Present) byte[4] [4] 1: Active Format Info is present B (Bar Info) byte[4] [3:2] 00: No bar, 01: Top/Bottom, 10: Left/Right, 11: Both S (Scan Info) byte[4] [1:0] 00: Unknown, 01: Overscan, 10: Underscan C (Colorimetry) byte[5] [7:6] 00: None (BT.</description></item><item><title>SwinIR Experiment Summary — March 31, 2025</title><link>https://hanketgithub.github.io/tech/swinir_experiment_2025_0331/</link><pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate><guid>https://hanketgithub.github.io/tech/swinir_experiment_2025_0331/</guid><description>🧪 SwinIR Experiment Summary — March 31, 2025
1. Environment Setup OS: Ubuntu 24.04.2 LTS (noble) lsb_release -a Python: 3.12.3 python3 --version GPU: NVIDIA GeForce RTX 4090 Driver: 570.124.06 CUDA: 12.8 nvidia-smi PyTorch: 2.5.1+cu121 CUDA Available: True import torch print(torch.__version__) print(torch.cuda.is_available()) 2. Project Setup Install Python venv and create environment: sudo apt install python3.12-venv python3 -m venv ~/venvs/swinir source ~/venvs/swinir/bin/activate Install PyTorch (CUDA 12.1): pip install torch torchvision --index-url https://download.pytorch.org/whl/cu121 Clone SwinIR repo and install dependencies: git clone https://github.</description></item></channel></rss>